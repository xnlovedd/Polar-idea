<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/cache  http://www.springframework.org/schema/cache/spring-cache-3.1.xsd">
	<!-- Shiro的Web过滤器 -->
	<bean id="shiroFilter" class="polar.island.security.filter.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="databaseResouceFilter" ref="dataBaseResourceFilter"/>
		<property name="filters">
			<map>
				<entry key="concurrentControlFilter" value-ref="concurrentControlFilter" />
				<!-- 拦截从数据库读取的资源-权限数据 -->
				<entry key="dataBaseResourceFilter" value-ref="dataBaseResourceFilter" />
			</map>
		</property>
		<property name="filterChainDefinitions">
			<!-- shiro的过滤器，将会只执行第一个匹配的url，此处不要再写过滤器，应该以标签/数据库形式配置-->
			<value>
				/logIn = concurrentControlFilter
				/** = dataBaseResourceFilter
			</value>
		</property>
	</bean>
	<!-- 动态拦截器 -->
	<bean id="dataBaseResourceFilter" class="polar.island.security.filter.DatabaseResouceFilter"></bean>
	<!-- 并发人数控制的过滤器，当用户登录时，访问此过滤器 -->
	<bean id="concurrentControlFilter" class="polar.island.security.filter.ConcurrentControlFilter">
		<constructor-arg ref="shiroCacheManager" index="0" />
		<constructor-arg value="activeUsers" index="1" />
		<constructor-arg ref="sessionManager" index="2" />
		<constructor-arg value="1" index="3" />
	</bean>
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="shiroRealm" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="rememberMeManager" ><null></null></property>
	</bean>
	<!-- 会话监听器 -->
	<bean id="sessionListener" class="polar.island.security.session.SessionListener">
		<constructor-arg ref="shiroCacheManager" index="0" />
		<constructor-arg value="activeUsers" index="1" />
		<constructor-arg value="activeSessionsCache" index="2" />
	</bean>
	<!-- session管理器 -->
	<bean id="sessionManager" class="polar.island.security.session.ShiroSessionManager">
		<property name="sessionIdCookie" ref="sessionIdCookie"></property>
		<property name="sessionDAO" ref="sessionDAO"></property>
		<property name="cacheManager" ref="shiroCacheManager"></property>
		<property name="sessionListeners" ref="sessionListener" />
		<!-- 设置超时时间 ,单位毫秒 -->
		<property name="globalSessionTimeout" value="3000000" />
		<property name="deleteInvalidSessions" value="true" />
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler" />
	</bean>
	<!-- 会话验证调度器 -->
	<bean id="sessionValidationScheduler"
		class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
		<property name="sessionManager" ref="sessionManager" />
		<!-- 设置调度时间间隔，单位毫秒，默认就是1小时 -->
		<property name="interval" value="300000" />
	</bean>
	<bean id="sessionDAO" class="polar.island.security.session.ShiroSessionDao">
		<property name="activeSessionsCacheName" value="activeSessionsCache"></property>
		<property name="cacheManager" ref="shiroCacheManager"></property>
	</bean>
	<!-- sessionManager创建会话Cookie的模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">

		<property name="name" value="sid"></property>
		<!-- cookie过期时间,单位为秒，-1表示浏览器关闭就过期 -->
		<property name="maxAge" value="-1"></property>
	</bean>
	<!-- 凭证匹配器 -->
	<bean id="credentialsMatcher"
		class="polar.island.security.matches.ShiroLimitRetryCountMatcher">
		<constructor-arg ref="shiroCacheManager" index="0" />
		<constructor-arg value="retryCache" index="1" />
		<!-- 密码重置次数 -->
		<constructor-arg value="5" index="2" />
		<!-- 密码锁定时间 -->
		<constructor-arg value="1800000" index="3" />
		<!-- 密码盐值加密 -->
		<property name="hashAlgorithmName" value="sha-1" />
		<!-- 指定散列次数为1024次 -->
		<property name="hashIterations" value="1024" />
		<!-- 指定Hash散列值使用Hex加密存储。value="false"表明hash散列值用用Base64-encoded存储。 -->
		<property name="storedCredentialsHexEncoded" value="true" />
	</bean>
	<!-- 密码管理器 -->
	<bean id="encryManager" class="polar.island.core.security.EncryManager">
		<constructor-arg value="sha-1" index="0" />
		<constructor-arg value="1024" index="1" />
	</bean>
	<bean id="shiroRealm" class="polar.island.security.realm.ShiroRealm">
		<property name="encryManager" ref="encryManager" />
		<property name="credentialsMatcher" ref="credentialsMatcher" />
		<!-- 启用缓存，默认false； -->
		<property name="cachingEnabled" value="true"></property>
		<!-- 启用身份验证缓存，即缓存AuthenticationInfo信息，默认false -->
		<property name="authenticationCachingEnabled" value="true"></property>
		<property name="authenticationCacheName" value="infoCache"></property>
		<!-- 启用授权缓存，即缓存AuthorizationInfo信息，默认false -->
		<property name="authorizationCacheName" value="permissionCache"></property>
		<property name="authorizationCachingEnabled" value="true"></property>
		<property name="cacheManager" ref="shiroCacheManager"></property>
	</bean>
	<!-- 缓存管理器 使用Ehcache实现 -->
	<!--  <bean id="shiroCacheManager" class="polar.island.security.cache.ShiroCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:cache/shiroCache.xml" />
	</bean>  -->
	<!-- 使用redis缓存 -->
 	<bean id="shiroCacheManager" class="polar.island.core.cache.JedisShiroCacheManager">
	</bean>
	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<!-- AOP式方法级权限检查 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
	<bean id="securityService" class="polar.island.security.service.SecurityService">
		<property name="permissionCacheName" value="permissionCache"/> <!-- 缓存用户 权限信息的key -->
		<property name="infoCacheName" value="infoCache"/> <!-- 缓存用户信息的key -->
		<property name="cacheManager" ref="shiroCacheManager"/><!-- shiro的缓存管理器 -->
		<property name="databaseResouceFilter" ref="dataBaseResourceFilter"/> <!-- 过滤器 -->
	</bean>
	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>

</beans>